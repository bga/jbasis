/**
  @file
  @author  Fyodorov "bga" Alexander <bga.email@gmail.com>
 
  @section LICENSE
 
  Copyright (c) 2009-2010, Fyodorov "Bga" Alexander <bga.email@gmail.com>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * The name of the developer may not be used to endorse or promote
        products derived from this software without specific prior
        written permission.

  THIS SOFTWARE IS PROVIDED BY FYODOROV "BGA" ALEXANDER "AS IS" AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL FYODOROV "BGA" ALEXANDER BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
  @section DESCRIPTION
  
  cross browser support functions for DOM.Node
 
*/

$jb.Loader._scope().
_require("$jb/OOP.js").
//_require("$jb/$jb.EventTarget.js").
_willDeclared("$jb/$jb.Storage.Base.js").
_completed(function($G, $jb){

/** @namespace contains classes and vars for data store purposes */
if($jb.Storage == null)
  $jb.Storage = {};

/** @class base storage class */ 
$jb.Storage.Base = Object(function()
{
  /** @var {$jb.EventTarget} event target for storage events */
  this.eventTarget = null;
});

$jb.Storage.Base.name = '$jb.Storage.Base';

/** @enum contains bitflags for <$jb.Storage.Base#_query:fieldsOpt> */
if($jb.Storage.QueryField == null)
  $jb.Storage.QueryField = {};
  
/** @const key field required in <$jb.Storage.Base#_query> */
$jb.Storage.QueryField.KEY = 1 << 0;

/** @const value field required in <$jb.Storage.Base#_query> */
$jb.Storage.QueryField.VALUE = 1 << 1;

/**
  @fn request storage initialization
  @param _onComplete {Optional} {
    function(
      this {ThisClass} storage object
      result {Boolean} success status
    )
  }
  @param paramsString {String} serializated params string preveviosy generated by <ThisClass#_paramString> to restore storage params.
  @return {$jb.Job} 
*/  
$jb.Storage.Base.prototype._init = function(_onComplete, paramsString)
{
};

/**
  @fn serialize storage params. Used to restore storage by <ThisClass#_init>.
  @return {String} serializated params string
*/
$jb.Storage.Base.prototype._paramsString = function()
{
  return '';
};

/**
  @fn calculate max currently availbale size value to set. Not absolutely max size allowed. Bigger that real max not allowed.
  @param key {Any -> String} key for value for calculate
  @return {Number} size 
*/
$jb.Storage.Base.prototype._calcMaxValueSize = function(key)
{
  return 0;
};

/**
  @fn set <value> for <key>
  @param _onSetComplete {Optional} {
    function(
      this {$jb.Storage.Base} storage object
      key {String} key string which passed to <$jb.Storage.Base#_set> in <key>,
      hasValue {Boolean} success status if value set 
    )
  } callback function which receive result of operation
  @param key {Any -> String} key 
  @param value {Any -> String} value
  @return {Boolean || null} success boolean or null if operation is asynchronous
*/
$jb.Storage.Base.prototype._set = function(_onSetComplete, key, value)
{
  return false;
};

/**
  @fn get value by <key>
  @param _onGetComplete {Optional} {
    function(
      this {$jb.Storage.Base} storage object
      key {String} key string which passed to <$jb.Storage.Base#_get> in <key>,
      value {String || null} value string or null if not found 
    )
  } callback function which receive result of operation
  @param key {Any -> String} key
  @return {String || null} value string if found else null or null if operation is asynchronous
*/
$jb.Storage.Base.prototype._get = function(_onGetComplete, key)
{
  return null;
};

/**
  @fn check existence of <key> in storage
  @param _onHasComplete {Optional} {
    function(
      this {$jb.Storage.Base} storage object
      key {String} key string which passed to <$jb.Storage.Base#_has> in <key>,
      isValueExist {Boolean} true if value exist else false 
    )
  } callback function which receive result of operation
  @param key {Any -> String} key
  @return true if <key> found else false
*/
$jb.Storage.Base.prototype._has = function(_onHasComplete, key)
{
  return false;
};

/**
  @fn delete <key> in storage
  @param _onDeleteComplete {Optional} {
    function(
      this {$jb.Storage.Base} storage object
      key {String} key string which passed to <$jb.Storage.Base#_delete> in <key>,
      isValueDeleted {Boolean} success status (true if value by <key> not exist, false if exist) 
    )
  } callback function which receive result of operation
  @param key {Any -> String} key string
  @return {Boolean} true if <key> deleted success else false
*/
$jb.Storage.Base.prototype._delete = function(_onDeleteComplete, key)
{
  return false;
};

/**
  @fn flush storage. Fire <$jb.Storage.Base#onFlush> 
  @return {Boolean} success boolean
*/
$jb.Storage.Base.prototype._flush = function()
{
  return false;
};

/**
  @fn get trait by <name>
  @return {Any} trait value
*/
$jb.Storage.Base.prototype._trait = function(name)
{
  var val = this.traitMap[name];
  
  return (typeof(val) == 'function') ? val.call(this) : value;
};

/**
  @fn enumerate all (key, value) pairs. if _callback return false enum break
  @return last _callback call result or null if _callback not called
*/
$jb.Storage.Base.prototype._query = function(_onItem, filter, fieldsOpt)
{
};


/*
$jb.Storage.Base.prototype._clear=function(key)
{
  return 0;
};
$jb.Storage.Base.prototype._length=function()
{
  return 0;
};
*/
});